[project]
name = "testapp"
version = "0.1.0"
description = "Django TestApp for DevOps Assessment"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Elio Severo Junior", email = "elioseverojunior@gmail.com"}
]
maintainers = [
    {name = "Elio Severo Junior", email = "elioseverojunior@gmail.com"}
]
keywords = ["django", "web", "api", "enterprise"]
classifiers = [
    "Development Status :: 0.1.0 - Alpha",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

requires-python = ">=3.13,<3.14"
dependencies = [
    # Default Project Dependencies
    "asgiref>=3.9.0,<4.0.0",
    "django>=5.2.0,<6.0.0",
    "pytz>=2025.2,<2026.0",
    "sqlparse>=0.5.3,<1.0.0",
    # Enterprise dependencies - updated for Django 5.2 compatibility
    "django-cors-headers>=4.7.0,<5.0.0",
    "djangorestframework>=3.16.0,<4.0.0",
    "drf-spectacular>=0.28.0,<1.0.0",
    "django-environ>=0.11.0,<1.0.0",
    "psycopg2-binary>=2.9.0,<3.0.0",
    "redis>=5.0.0,<6.0.0",
    "celery>=5.3.0,<6.0.0",
    "django-health-check>=3.18.0,<4.0.0",
    "python-json-logger>=2.0.0,<3.0.0",
    "whitenoise>=6.9.0",
    "psutil>=6.1.1",
]

[dependency-groups]

production = [
    "gunicorn>=23.0.0,<24.0.0",
    "whitenoise>=6.7.0,<7.0.0",
    "sentry-sdk[django]>=2.0.0,<3.0.0",
    "newrelic>=10.0.0,<11.0.0",
]

development = [
    # SOPS wrapper dependencies
    "PyYAML>=6.0.0,<7.0.0",
]

lint = [
    "black>=24.0.0,<25.0.0",
    "flake8>=7.0.0,<8.0.0",
    "flake8-docstrings>=1.7.0,<2.0.0",
    "flake8-import-order>=0.18.0,<1.0.0",
    "isort>=5.13.0,<6.0.0",
    "mypy>=1.8.0,<2.0.0",
    "django-stubs>=5.0.0,<6.0.0",
    "djangorestframework-stubs>=3.15.0,<4.0.0",
    "ruff>=0.1.0,<1.0.0",
    "pre-commit>=3.6.0,<4.0.0",
]

security = [
    "bandit[toml]>=1.7.5,<2.0.0",
    "safety>=3.0.0,<4.0.0",
    "semgrep>=1.50.0,<2.0.0",
    "pip-audit>=2.6.0,<3.0.0",
]

test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-django>=4.8.0,<5.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-xdist>=3.5.0,<4.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    "freezegun>=1.4.0,<2.0.0",
    "responses>=0.24.0,<1.0.0",
]

docs = [
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=2.0.0,<3.0.0",
    "sphinx-autodoc-typehints>=1.25.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0",
]

debug = [
    "django-debug-toolbar>=4.2.0,<5.0.0",
    "django-extensions>=3.2.0,<4.0.0",
    "ipython>=8.18.0,<9.0.0",
    "rich>=13.7.0,<14.0.0",
]

dev = [
    {include-group = "development"},
    {include-group = "lint"},
    {include-group = "security"},
    {include-group = "test"},
    {include-group = "docs"},
    {include-group = "debug"},
]

[tool.uv]
link-mode = "copy"
index-url = "https://pypi.org/simple"
index-strategy = "first-index"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_django = "django"
known_first_party = "testapp"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "DJANGO", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "testapp.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -v
    --tb=short
    --strict-markers
    --strict-config
    --cov=testapp
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --junit-xml=reports/junit.xml
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["testapp"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "manage.py",
    "testapp/settings/*",
    "testapp/wsgi.py",
    "testapp/asgi.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DJ", # flake8-django
    "UP", # pyupgrade
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "Q",   # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
]
exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"*/migrations/*" = ["ALL"]
"*/tests/*" = ["B011", "PIE804"]

[tool.ruff.lint.isort]
known-first-party = ["testapp"]

[tool.bandit]
recursive = true
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
