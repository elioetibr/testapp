name: CI Feature Branch (Fast)

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '*.md'
      - '**/*.md'
      - 'docs/**'
      - 'README*'
      - 'CHANGELOG*'
      - 'LICENSE*'
      - '.gitignore'
      - '.gitleaks.toml'
  push:
    branches-ignore: [ main, master, develop ]
    paths-ignore:
      - '*.md'
      - '**/*.md'
      - 'docs/**'
      - 'README*'
      - 'CHANGELOG*'
      - 'LICENSE*'
      - '.gitignore'
      - '.gitleaks.toml'

env:
  PYTHON_VERSION: '3.13'

# Optimized permissions for feature branches
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ⚡ STAGE 1: FAST FEEDBACK (Target: 2-3 minutes)
  fast-validation:
    name: ⚡ Fast Validation
    runs-on: ${{ vars.RUNS_ON || 'ubuntu-latest' }}
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for speed

      # ⚡ Essential Security (Secrets only)
      - name: 🔍 Quick Secret Scan (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

      # ⚡ Fast Python Setup with Caching
      - name: 🐍 Setup Python and UV (Cached)
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: 💾 Cache UV Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-feature-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-feature-${{ runner.os }}-
            uv-${{ runner.os }}-

      # ⚡ Quick Install & Basic Tests
      - name: 📦 Install Dependencies (Fast)
        run: |
          uv sync --group dev --no-progress
          
      - name: 🧪 Quick Unit Tests
        env:
          SECRET_KEY: django-test-secret-key-for-ci
          ENVIRONMENT: testing
          DEBUG: false
          REQUIRED_SETTING: test-value-for-ci
          EMAIL_URL: smtp://localhost:25
        run: |
          mkdir -p logs src/static
          cd src
          # Run only fast unit tests, skip slow integration tests
          uv run python manage.py test --parallel --keepdb --exclude-tag=slow testapp.tests

      # ⚡ Critical Security Check (Bandit - Python only)
      - name: 🔒 Essential Security Scan (Bandit)
        run: |
          uv run bandit -r src/testapp/ -ll -f txt --skip B101 || true

      # 📊 Quick Summary
      - name: ✅ Fast Validation Summary
        run: |
          echo "## ⚡ Fast Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret scanning: Complete" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Essential security: Scanned" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Total time: ~2-3 minutes**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Developer feedback complete!** Full validation will run on merge to main." >> $GITHUB_STEP_SUMMARY

  # 🔄 Infrastructure Quick Check (if infrastructure changed)
  infrastructure-quick:
    name: 🏗️ Infrastructure Quick Check
    runs-on: ${{ vars.RUNS_ON || 'ubuntu-latest' }}
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && contains(github.event.head_commit.message, 'infrastructure/') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'infrastructure/.nvmrc'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install and Test Infrastructure
        run: |
          cd infrastructure
          npm ci --prefer-offline
          npm run build
          npm run test -- --passWithNoTests
          npm run synth

      - name: Infrastructure Summary
        run: |
          echo "## 🏗️ Infrastructure Quick Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TypeScript compilation: Complete" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Unit tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CDK synthesis: Success" >> $GITHUB_STEP_SUMMARY

  # 📝 PR Comment with Results
  pr-feedback:
    name: 📝 PR Feedback
    runs-on: ubuntu-latest
    needs: [fast-validation]
    if: github.event_name == 'pull_request' && !failure()
    
    steps:
      - name: Comment PR with Fast Results
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ⚡ **Fast CI Results**
            
            ✅ **Feature branch validation complete!** (2-3 minutes)
            
            ### Quick Checks Passed:
            - 🔍 **Secret scanning** - No secrets detected
            - 🧪 **Unit tests** - All tests passed  
            - 🔒 **Essential security** - Critical issues checked
            ${context.payload.pull_request.head.ref.includes('infrastructure') ? '- 🏗️ **Infrastructure** - CDK synthesis successful' : ''}
            
            ### ⚡ **Why This is Fast:**
            - Only essential security checks (no full security matrix)
            - Unit tests only (no integration tests)
            - Optimized caching for dependencies
            - Shallow git clone for speed
            
            ### 🔄 **What Happens Next:**
            - **Full CI/CD** will run when merged to \`main\`
            - Complete security scanning (Snyk, Trivy, Semgrep)
            - Integration tests and deployment
            - Comprehensive validation pipeline
            
            ---
            
            🎯 **Fast feedback delivered!** You can continue iterating quickly on this feature branch.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ❌ Failure Notification
  failure-notification:
    name: ❌ Failure Notification  
    runs-on: ubuntu-latest
    needs: [fast-validation]
    if: failure() && github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR with Failure
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ **Fast CI Failed**
            
            The quick validation checks failed. Please review the errors above and fix them.
            
            ### Common Issues:
            - 🔐 **Secrets detected** - Remove any hardcoded credentials
            - 🧪 **Test failures** - Check unit test output
            - 🔒 **Security issues** - Review Bandit security warnings
            - 🏗️ **Infrastructure errors** - Check CDK/TypeScript compilation
            
            ### 🔧 **Quick Fixes:**
            - Run tests locally: \`make test-django\`
            - Security scan: \`make security\`
            - Infrastructure test: \`make infra-test\`
            
            ---
            
            ⚡ **Fix these issues for fast feedback on your next push!**
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });