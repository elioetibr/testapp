{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "TestApp Django API Collection",
		"description": "Comprehensive test collection for Django TestApp DevOps Assessment.\n\nThis collection tests the Django application endpoints for both development and production environments.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "Health Check - GET /health/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is 'OK'\", function () {",
									"    pm.expect(pm.response.text()).to.eql('OK');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html,application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/health/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								""
							]
						},
						"description": "Health check endpoint that returns 'OK' status. Used by load balancers and monitoring systems."
					},
					"response": [
						{
							"name": "Successful Health Check",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "OK"
						}
					]
				}
			],
			"description": "Health check endpoints for monitoring and load balancer verification."
		},
		{
			"name": "Application Endpoints",
			"item": [
				{
					"name": "Hello World - GET /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is 'Hello World'\", function () {",
									"    pm.expect(pm.response.text()).to.eql('Hello World');",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Server header contains expected values\", function () {",
									"    const serverHeader = pm.response.headers.get('Server');",
									"    pm.expect(serverHeader).to.satisfy(function(header) {",
									"        return header.includes('WSGIServer') || header.includes('gunicorn');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html,application/json",
								"type": "text"
							},
							{
								"key": "User-Agent",
								"value": "PostmanTestAgent/1.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Main application endpoint that returns 'Hello World' message."
					},
					"response": [
						{
							"name": "Successful Hello World",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "Hello World"
						}
					]
				}
			],
			"description": "Main application endpoints providing core functionality."
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "404 Not Found - GET /nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response contains error information\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Not Found');",
									"});",
									"",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/nonexistent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"nonexistent"
							]
						},
						"description": "Test 404 error handling for non-existent endpoints."
					},
					"response": []
				},
				{
					"name": "Method Not Allowed - POST /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Allow header contains GET\", function () {",
									"    const allowHeader = pm.response.headers.get('Allow');",
									"    if (allowHeader) {",
									"        pm.expect(allowHeader).to.include('GET');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"test\": \"data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Test method not allowed error handling."
					},
					"response": []
				}
			],
			"description": "Tests for error handling and edge cases."
		},
		{
			"name": "Performance Tests",
			"item": [
				{
					"name": "Load Test - Multiple Health Checks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text()).to.eql('OK');",
									"});",
									"",
									"// Log response time for analysis",
									"console.log(`Health check response time: ${pm.response.responseTime}ms`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								""
							]
						},
						"description": "Performance test for health check endpoint. Run this multiple times to test load."
					},
					"response": []
				},
				{
					"name": "Concurrent Request Test - Hello World",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is reasonable under load\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response content is consistent\", function () {",
									"    pm.expect(pm.response.text()).to.eql('Hello World');",
									"});",
									"",
									"// Log response time for analysis",
									"console.log(`Hello World response time: ${pm.response.responseTime}ms`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Performance test for main endpoint. Run this multiple times to test concurrent load."
					},
					"response": []
				}
			],
			"description": "Performance and load testing scenarios."
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "Security Headers Check - GET /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"X-Frame-Options header is present\", function () {",
									"    const xFrameOptions = pm.response.headers.get('X-Frame-Options');",
									"    if (xFrameOptions) {",
									"        pm.expect(xFrameOptions).to.be.oneOf(['DENY', 'SAMEORIGIN']);",
									"    } else {",
									"        console.log('X-Frame-Options header not present - consider adding for security');",
									"    }",
									"});",
									"",
									"pm.test(\"X-Content-Type-Options header check\", function () {",
									"    const xContentTypeOptions = pm.response.headers.get('X-Content-Type-Options');",
									"    if (xContentTypeOptions) {",
									"        pm.expect(xContentTypeOptions).to.eql('nosniff');",
									"    } else {",
									"        console.log('X-Content-Type-Options header not present - consider adding for security');",
									"    }",
									"});",
									"",
									"pm.test(\"No sensitive information in headers\", function () {",
									"    const serverHeader = pm.response.headers.get('Server');",
									"    if (serverHeader) {",
									"        pm.expect(serverHeader).to.not.include('version');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Check for security headers and potential information disclosure."
					},
					"response": []
				}
			],
			"description": "Security-focused tests for headers and potential vulnerabilities."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log(`Running request to: ${pm.request.url}`);",
					"",
					"// Set timestamp for request tracking",
					"pm.globals.set('request_timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"const requestTimestamp = pm.globals.get('request_timestamp');",
					"console.log(`Request completed at: ${new Date().toISOString()}`);",
					"console.log(`Request started at: ${requestTimestamp}`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the TestApp API"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string",
			"description": "API version identifier"
		}
	]
}